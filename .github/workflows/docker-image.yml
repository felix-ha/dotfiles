# This name will appear in the "Actions" tab of your GitHub repository
name: Docker Image CI

# Controls when the action will run
on:
  # Triggers the workflow on push events to the "main" branch
  push:
    branches: [ "main" ]
  
  # Triggers the workflow on pull request events targeting the "main" branch
  pull_request:
    branches: [ "main" ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Grant permissions for the GITHUB_TOKEN to push to GHCR
    permissions:
      contents: read  # To check out code
      packages: write # To push packages (container images)

    steps:
      # Step 1: Check out your repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry (GHCR)
      # This step only runs on 'push' events, not 'pull_request' events
      - name: Log in to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Extract metadata (tags and labels) for Docker
      # This automatically creates tags like 'latest' for main branch pushes
      # and other tags for PRs, etc.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # Step 4: Set up Docker Buildx
      # This action sets up the Docker Buildx builder, which is needed for the build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 5: Build and push the Docker image
      # This is the main action that builds and pushes your image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          # 'context: .' tells the builder that the build context 
          # (where it finds the Dockerfile and other files) is the root directory
          context: .
          
          # 'file: ./Dockerfile' explicitly points to the Dockerfile in the root
          file: ./Dockerfile
          
          # This is the key:
          # 'push: true' only if the event is a 'push' (to main)
          # 'push: false' for all other events (like 'pull_request')
          push: ${{ github.event_name == 'push' }}
          
          # Use the tags and labels generated by the metadata action
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


